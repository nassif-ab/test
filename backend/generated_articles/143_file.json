{
  "titre": "Création d'une application SPA (Single Page Application) avec React et Redux",
  "image": "/post.jpg",
  "contenu": "# Création d'une application SPA avec React et Redux\n\nCe guide vous accompagnera dans la création d'une application Single Page Application (SPA) en utilisant React pour l'interface utilisateur et Redux pour la gestion de l'état de l'application.\n\n## Prérequis\n\n*   Node.js et npm (ou yarn) installés sur votre machine.\n*   Une connaissance de base de JavaScript (ES6+), React et Redux est recommandée.\n\n## Initialisation du projet\n\n1.  **Créer un nouveau projet React**\n\n    Utilisez `create-react-app` pour initialiser un nouveau projet React.\n\n    ```bash\n    npx create-react-app my-spa-app\n    cd my-spa-app\n    ```\n\n2.  **Installer Redux et React-Redux**\n\n    Ajoutez les dépendances Redux et React-Redux à votre projet.\n\n    ```bash\n    npm install redux react-redux @reduxjs/toolkit\n    ```\n\n## Structure du projet\n\nNous allons organiser notre projet comme suit :\n\n```\nmy-spa-app/\n├── src/\n│   ├── components/\n│   │   └── ... (composants React)\n│   ├── redux/\n│   │   ├── actions/\n│   │   │   └── ... (actions Redux)\n│   │   ├── reducers/\n│   │   │   └── ... (reducers Redux)\n│   │   ├── store.js (configuration du store Redux)\n│   ├── App.js (composant racine)\n│   ├── index.js (point d'entrée)\n│   └── ...\n├── public/\n├── package.json\n└── ...\n```\n\n## Configuration de Redux\n\n1.  **Créer un store Redux (src/redux/store.js)**\n\n    Utilisez `configureStore` de `@reduxjs/toolkit` pour configurer le store.\n\n    ```javascript\n    // src/redux/store.js\n    import { configureStore } from '@reduxjs/toolkit';\n    import rootReducer from './reducers';\n\n    const store = configureStore({\n      reducer: rootReducer,\n    });\n\n    export default store;\n    ```\n\n2.  **Créer des actions Redux (src/redux/actions/)**\n\n    Définissez les actions qui peuvent être dispatchées pour modifier l'état de l'application.\n\n    ```javascript\n    // src/redux/actions/todoActions.js\n    export const addTodo = (text) => ({\n      type: 'ADD_TODO',\n      payload: { text },\n    });\n\n    export const toggleTodo = (id) => ({\n      type: 'TOGGLE_TODO',\n      payload: { id },\n    });\n    ```\n\n3.  **Créer des reducers Redux (src/redux/reducers/)**\n\n    Les reducers définissent comment l'état de l'application change en réponse aux actions dispatchées.\n\n    ```javascript\n    // src/redux/reducers/todoReducer.js\n    const initialState = {\n      todos: [],\n    };\n\n    const todoReducer = (state = initialState, action) => {\n      switch (action.type) {\n        case 'ADD_TODO':\n          return {\n            ...state,\n            todos: [...state.todos, { id: Date.now(), text: action.payload.text, completed: false }],\n          };\n        case 'TOGGLE_TODO':\n          return {\n            ...state,\n            todos: state.todos.map((todo) =>\n              todo.id === action.payload.id ? { ...todo, completed: !todo.completed } : todo\n            ),\n          };\n        default:\n          return state;\n      }\n    };\n\n    export default todoReducer;\n    ```\n\n4.  **Combiner les reducers (src/redux/reducers/index.js)**\n\n    Si vous avez plusieurs reducers, combinez-les en un seul reducer racine.\n\n    ```javascript\n    // src/redux/reducers/index.js\n    import { combineReducers } from 'redux';\n    import todoReducer from './todoReducer';\n\n    const rootReducer = combineReducers({\n      todos: todoReducer,\n    });\n\n    export default rootReducer;\n    ```\n\n## Intégration de Redux dans React\n\n1.  **Fournir le store Redux à l'application React (src/index.js)**\n\n    Utilisez le `Provider` de `react-redux` pour rendre le store disponible à tous les composants de l'application.\n\n    ```javascript\n    // src/index.js\n    import React from 'react';\n    import ReactDOM from 'react-dom/client';\n    import App from './App';\n    import { Provider } from 'react-redux';\n    import store from './redux/store';\n\n    const root = ReactDOM.createRoot(document.getElementById('root'));\n    root.render(\n      <Provider store={store}>\n        <App />\n      </Provider>\n    );\n    ```\n\n2.  **Connecter les composants React au store Redux**\n\n    Utilisez la fonction `connect` de `react-redux` pour connecter les composants React au store Redux.\n\n    ```javascript\n    // src/components/TodoList.js\n    import React from 'react';\n    import { connect } from 'react-redux';\n    import { addTodo, toggleTodo } from '../redux/actions/todoActions';\n\n    const TodoList = ({ todos, addTodo, toggleTodo }) => {\n      const handleAddTodo = () => {\n        const text = prompt('Enter todo text:');\n        if (text) {\n          addTodo(text);\n        }\n      };\n\n      return (\n        <div>\n          <button onClick={handleAddTodo}>Add Todo</button>\n          <ul>\n            {todos.map((todo) => (\n              <li key={todo.id}>\n                <input\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                  onChange={() => toggleTodo(todo.id)}\n                />\n                {todo.text}\n              </li>\n            ))}\n          </ul>\n        </div>\n      );\n    };\n\n    const mapStateToProps = (state) => ({\n      todos: state.todos.todos,\n    });\n\n    const mapDispatchToProps = {\n      addTodo,\n      toggleTodo,\n    };\n\n    export default connect(mapStateToProps, mapDispatchToProps)(TodoList);\n    ```\n\n## Routage (Optionnel)\n\nPour une véritable SPA, vous aurez besoin d'un routeur. `react-router-dom` est un choix populaire.\n\n```bash\nnpm install react-router-dom\n```\n\nUtilisez les composants `BrowserRouter`, `Route`, et `Link` pour gérer la navigation.\n\n## Conclusion\n\nCe guide vous a montré comment créer une application SPA simple avec React et Redux. Vous pouvez étendre cette application en ajoutant plus de fonctionnalités, de composants et de reducers.\n",
  "categorie": "Développement Logiciel"
}